version: "3.8"

services:
  # ==================== DATABASE SERVICES ====================

  # Auth Service Database
  auth-postgres:
    image: postgres:15-alpine
    container_name: auth-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Pos#3014708
      POSTGRES_DB: authdb
    ports:
      - "5433:5432"
    volumes:
      - auth-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-network

  # Chat Service Database
  chat-postgres:
    image: postgres:15-alpine
    container_name: chat-postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: Pos#3014708
      POSTGRES_DB: chatdb
    ports:
      - "5434:5432"
    volumes:
      - chat-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-network

  # Kong Database
  kong-database:
    image: postgres:13
    container_name: kong-database
    environment:
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kongpass
      POSTGRES_DB: kong
    volumes:
      - kong-postgres-data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U kong"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-network

  # ==================== CACHE & MESSAGE BROKER ====================

  # Redis (Shared)
  redis:
    image: redis:7-alpine
    container_name: microservices-redis
    command: redis-server --appendonly yes
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5
    networks:
      - microservices-network

  # Zookeeper (Kafka dependency)
  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.0
    container_name: microservices-zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    healthcheck:
      test: ["CMD", "bash", "-c", "echo 'ruok' | nc localhost 2181"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - microservices-network

  # Kafka (Shared)
  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: microservices-kafka
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,OUTSIDE://localhost:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: true
      KAFKA_DELETE_TOPIC_ENABLE: true
    depends_on:
      zookeeper:
        condition: service_healthy
    healthcheck:
      test:
        [
          "CMD",
          "kafka-broker-api-versions",
          "--bootstrap-server",
          "localhost:9092",
        ]
      interval: 30s
      timeout: 10s
      retries: 10
      start_period: 60s
    networks:
      - microservices-network

  # ==================== MICROSERVICES ====================

  # Auth Service
  auth-service:
    build:
      context: ./auth-service
      dockerfile: Dockerfile
    container_name: auth-service
    ports:
      - "3001:3001"
    environment:
      PORT: 3001
      NODE_ENV: development
      DATABASE_URL: postgres://postgres:Pos%233014708@auth-postgres:5432/authdb
      REDIS_URL: redis://redis:6379
      KAFKA_BROKER: kafka:9092
      JWT_SECRET: 01aee198bd1475f54ba9fbc7663430a8e659d8755b550fcb322008f0f66d3719
      JWT_EXPIRES_IN: 24h
      LOG_LEVEL: debug
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:8000,http://localhost:8001
      SENTRY_DSN: https://6de64903272f02b1ec1d382fa60a563d@o4510035651395584.ingest.de.sentry.io/4510035656769616
      SENTRY_ENVIRONMENT: development
      SENTRY_SAMPLE_RATE: 1.0
      SENTRY_TRACES_SAMPLE_RATE: 1.0
    depends_on:
      auth-postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - microservices-network

  # Chat Service
  chat-service:
    build:
      context: ./chat-service
      dockerfile: Dockerfile
    container_name: chat-service
    ports:
      - "3002:3002"
    environment:
      PORT: 3002
      NODE_ENV: development
      DATABASE_URL: postgres://postgres:Pos%233014708@chat-postgres:5432/chatdb
      REDIS_URL: redis://redis:6379
      KAFKA_BROKER: kafka:9092
      JWT_SECRET: 01aee198bd1475f54ba9fbc7663430a8e659d8755b550fcb322008f0f66d3719
      ALLOWED_ORIGINS: http://localhost:3000,http://localhost:8000,http://localhost:8001
      LOG_LEVEL: debug
      SENTRY_DSN: https://96f53729f88ff3c970a9d10448c277cb@o4510035651395584.ingest.de.sentry.io/4510038750986320
    depends_on:
      chat-postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      kafka:
        condition: service_healthy
      auth-service:
        condition: service_started
    restart: unless-stopped
    networks:
      - microservices-network

  # ==================== KONG API GATEWAY ====================

  # Kong Database Migration
  kong-migrations:
    image: kong:latest
    container_name: kong-migrations
    command: kong migrations bootstrap
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
      KONG_PG_DATABASE: kong
    depends_on:
      kong-database:
        condition: service_healthy
    networks:
      - microservices-network
    restart: "no"

  # Kong API Gateway
  kong:
    image: kong:latest
    container_name: kong-gateway
    environment:
      KONG_DATABASE: postgres
      KONG_PG_HOST: kong-database
      KONG_PG_USER: kong
      KONG_PG_PASSWORD: kongpass
      KONG_PG_DATABASE: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: 0.0.0.0:8001
      KONG_PROXY_LISTEN: 0.0.0.0:8000
      KONG_PLUGINS: bundled
      KONG_LOG_LEVEL: info
    ports:
      - "8000:8000" # Kong Proxy
      - "8001:8001" # Kong Admin API
      - "8443:8443" # Kong Proxy SSL
      - "8444:8444" # Kong Admin API SSL
    depends_on:
      kong-database:
        condition: service_healthy
      kong-migrations:
        condition: service_completed_successfully
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: unless-stopped
    networks:
      - microservices-network

  # Konga (Kong Admin UI)
  konga:
    image: pantsel/konga:latest
    container_name: konga
    environment:
      DB_ADAPTER: postgres
      DB_HOST: kong-database
      DB_USER: kong
      DB_PASSWORD: kongpass
      DB_DATABASE: konga_db
      NODE_ENV: development
    ports:
      - "8002:1337"
    depends_on:
      kong-database:
        condition: service_healthy
    restart: unless-stopped
    networks:
      - microservices-network

  # ==================== OPTIONAL SERVICES ====================

  # Kafka UI (optional - for development)
  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: kafka-ui
    ports:
      - "8081:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092
      KAFKA_CLUSTERS_0_ZOOKEEPER: zookeeper:2181
    depends_on:
      kafka:
        condition: service_healthy
    networks:
      - microservices-network
    profiles:
      - dev

  # Redis Commander (optional - for development)
  redis-commander:
    image: rediscommander/redis-commander:latest
    container_name: redis-commander
    ports:
      - "8083:8081"
    environment:
      REDIS_HOSTS: local:redis:6379
    depends_on:
      redis:
        condition: service_healthy
    networks:
      - microservices-network
    profiles:
      - dev

volumes:
  auth-postgres-data:
  chat-postgres-data:
  kong-postgres-data:
  redis-data:

networks:
  microservices-network:
    driver: bridge
